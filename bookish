#! /bin/bash

#! Do not create .bookish folders of your own in the working directories! Though the folder shouldn't be deleted unless there are no unhidden files inside.

#-----------------------------------------------------------------------------------

function py_search {
    # Python Search Engine working in /tmp.
    tmp_python_search_engine_dir=$(mktemp -d)
    mkdir "$tmp_python_search_engine_dir/Find"
    mkdir "$tmp_python_search_engine_dir/Results"

    cp "$python_to_seek_in_book" "$tmp_python_search_engine_dir/Find"

    # Creates python search engine, regex search for phrases and words within one or more utf-8 texts with output formatter and match priority division
    cat >"$tmp_python_search_engine_dir/bookishSearch.py" <<EOF
import re
import os
def words_select(string):
    words = re.split(r"\W+", string)
    return [word.lower() for word in filter(lambda x: x != "", words)]


def find(phrase, depth, volume):
    global SIZE, line_counter, black_mark
    long_string = list()
    for ind in range(SIZE):
        long_string += lines[ind]
    for i in range(len(long_string)):
        if long_string[i][1] in black_mark:
            continue
        if re.compile(phrase[0][: len(phrase[0]) - depth] + ".*").fullmatch(
            long_string[i][0]
        ):
            suitable_phrase = " ".join(
                [
                    pair[0]
                    for pair in long_string[i : min(i + len(phrase), len(long_string))]
                ]
            )
            pattern = " ".join([word[: len(word) - depth] + ".*" for word in phrase])
            if re.fullmatch(pattern, suitable_phrase):
                line_numbers = set(
                    [pair[1] for pair in long_string[i : i + len(phrase)]]
                )
                black_mark = black_mark | line_numbers
                result[volume][depth].append(
                    tuple(
                        [
                            line_numbers,
                            suitable_phrase,
                            [text[num + SIZE - line_counter] for num in line_numbers],
                        ]
                    )
                )
phrase = tuple(input("Find: ").lower().split())
DEPTH, SIZE = min(5, min([len(word) for word in phrase])), 10
files = list(
    filter(
        lambda x: re.fullmatch(r".*.md", x),
        os.listdir(os.path.dirname(os.path.abspath(__file__)) + "/Find" ),
    )
)
result = [[[] for i in range(DEPTH)] for j in range(len(files))]
black_mark = set()
with open(
    f"{os.path.dirname(os.path.abspath(__file__))}/Results/{' '.join(phrase)}.md",
    "w",
    encoding="utf-8",
) as output:
    for num in range(len(files)):
        with open(
            f"{os.path.dirname(os.path.abspath(__file__))}/Find/{files[num]}",
            "r",
            encoding="utf-8",
        ) as source:
            line, lines, line_counter = " ", list(), SIZE + 1
            text = list()
            for i in range(SIZE):
                line = source.readline()
                text.append(line)
                lines.append([(word, i + 1) for word in words_select(line)])
            while line:
                for depth in range(DEPTH):
                    find(phrase, depth, num)
                line = source.readline()
                text.append(line)
                lines.append([(word, line_counter) for word in words_select(line)])
                text.pop(0)
                lines.pop(0)
                line_counter += 1
        output.write(f"# BOOK {num + 1} [{files[num]}]\n\n")
        for i in range(DEPTH):
            output.write(f"## priority {i + 1}:\n")
            for pos in result[num][i]:
                output.write(f"line {','.join([str(num) for num in pos[0]])}: ")
                output.write("*" + pos[1] + "* \n")
                for l in pos[2]:
                    output.write(" - " + l + "\n")
        output.write("\n\n")
EOF
    # Starts the search engine, waits for user's querry
    python "$tmp_python_search_engine_dir/bookishSearch.py"
    #-----
    ranger "$tmp_python_search_engine_dir"
    #-----
    # Cleans up the tmp folder
    rm -dr "$tmp_python_search_engine_dir"
}

#-----------------------------------------------------------------------------------

clear

# Packages check: dmenu, poppler, leptonica, tesseract, tesseract-data.*, whiptail, ranger, python
#--------------------------------------------------------------------
if ! which dmenu &>/dev/null; then
    echo "No dmenu package found. Instal before starting Bookish"
    exit
fi
if ! which pdftoppm &>/dev/null; then
    echo "No poppler package found. Instal before starting Bookish"
    exit
fi
if ! find /usr/lib/libleptonica.so &>/dev/null; then
    echo "No leptonica package found. Instal before starting Bookish"
    exit
fi
if ! which tesseract &>/dev/null; then
    echo "No tesseract package found. Instal before starting Bookish"
    exit
fi
if ! find /usr/share/tessdata/*.traineddata &>/dev/null; then
    echo "No tesseract-data-.* package found. Instal any language.traineddata before starting Bookish"
    exit
fi
if ! find /usr/lib/python3.12/ &>/dev/null; then
    echo "No python package found. Instal before starting Bookish"
    exit
fi
if ! which whiptail &>/dev/null; then
    echo "No whiptail package found. Instal before starting Bookish"
    exit
fi
if ! which ranger &>/dev/null; then
    echo "No ranger package found. Instal before starting Bookish"
    exit
fi
#--------------------------------------------------------------------
# Starting Bookish

workingDirectory=$PWD

whiptail --msgbox --title "Bookish" "Read in Terminal, select in Dmenu.\n   Recommended to open Terminal floating.\n\n      The programm creates ./.bookish folder. \n      Do not put anything ./bookish/important as it could be deleted!\n\n         Secret commands: pwd! (show), book! (show), purge! (remove ./.bookish)" 0 0 0
echo "Choose a PDF Book to Split and do OCR analysis or analyse existing Splits."
echo "=============================================================================="

# Dmenu shows available .pdfs, you can select or search. If no pdf in folder - Nothing!

book=$(printf "%s\n" "$(find *.pdf 2>/dev/null | sort)" "Nothing!" | dmenu -l 10)

if [ "$book" == "Nothing!" ]; then
    echo "Changed your mind?"
    exit
fi

if [ "$(head -c 4 "$book")" != "%PDF" ]; then
    whiptail --msgbox "\"$book\" is not a PDF file or doesn't exist. Restarting" 0 0 0
    exec $(basename) "$0" && exit
fi

# Check if prompted pdf exists.
# Shows number of pages using poppler-utils' pdfinfo

for i in *.pdf; do
    if [ "$book" == "$i" ]; then
        echo "------------"
        echo "Selected: \"${book%.pdf}\""
        echo
        echo "Pages: $(pdfinfo "$book" | awk '/^Pages:/ {print $2}')"
        echo "------------"

        # What to do with books?

        while true; do

            bookishAction=$(printf "%s\n" "Split" "Scan" "Reselect" "Find" "Open Folder" "Delete Folder" "Exit" | dmenu -l 10)

            case "$bookishAction" in
            "Split")

                # Asks if Split

                splitQuestion="$(printf "%s\n" "Proceed \"${book%.pdf}\"" "Cancel" | dmenu -l 10)"

                if [ "$splitQuestion" == "Cancel" ]; then continue; fi

                echo "Started Split."

                mkdir .bookish 2>/dev/null

                # Checks if prompted numbers are numbers then proceeds Split

                while true; do

                    ifnumber='^[0-9]+$'

                    spoint="$(echo "Select Starting point" | dmenu -l 10)"

                    if ! [[ $spoint =~ $ifnumber ]]; then
                        echo "error: Not a Number" | dmenu -l 10
                        continue
                    fi

                    epoint="$(echo "Select Ending point" | dmenu -l 10)"

                    if ! [[ $epoint =~ $ifnumber ]]; then
                        echo "error: Not a Number" | dmenu -l 10
                        continue
                    elif [ "$spoint" -ge "$epoint" ]; then
                        echo "error: Prompt Ascending numbers" | dmenu -l 10
                        continue
                    elif [ "$epoint" -gt "$(pdfinfo "$book" | awk '/^Pages:/ {print $2}')" ]; then
                        echo "error: Prompted more Pages than possible" | dmenu -l 10
                    else
                        break
                    fi
                done

                # Starts pdf file split using poppler-utils' qpdf

                mkdir "$workingDirectory/.bookish/Split_${book%.pdf}" 2>/dev/null
                qpdf "$book" --pages . $spoint"-"$epoint -- "$workingDirectory/.bookish/Split_${book%.pdf}/p.$spoint-$epoint, $book"
                whiptail --msgbox "Did \"${book%.pdf}\" at $spoint-$epoint pages" 0 0 0
                echo "Did \"${book%.pdf}\" at $spoint-$epoint pages"

                echo "Split ended!"
                ;;

            "Scan")
                if [ -d ".bookish" ]; then
                    cd .bookish || exit 2

                    if ! [ -d "Split_${book%.pdf}" ]; then
                        whiptail --msgbox "No splits of a \"${book%.pdf}\" yet." 0 0 0
                        cd "$workingDirectory" || exit 2
                        continue
                    else
                        cd "./Split_${book%.pdf}" || exit 2
                    fi

                    currentbook=$book
                    book="$(printf "%s\n" "$(ls *.pdf 2>/dev/null | sort)" "Exit" | dmenu -l 10)"

                    if ! [ "$book" == "Exit" ]; then

                        while true; do
                            selectScanResolution=$(printf "%s\n" "Select resolution" "300" "150" "500" | dmenu -l 10)

                            ifnumber='^[0-9]+$'
                            if ! [[ "$selectScanResolution" =~ $ifnumber ]]; then
                                echo "error: Prompt a number"
                                continue
                            elif [ "$selectScanResolution" -gt 1000 ]; then
                                echo "error: Too big DPI"
                                continue
                            elif [ "$selectScanResolution" -lt 70 ]; then
                                echo "error: Too small DPI"
                                continue
                            else
                                break
                            fi
                        done

                        # Starts convertation from pdf to jpeg, overvrites if there are files already, if answer positive.

                        while true; do
                            if ! [ -e "Image_${book%.pdf}" ]; then
                                echo "Converting files."
                                mkdir "Image_${book%.pdf}" 2>/dev/null
                                pdftoppm -r "$selectScanResolution" "$book" ./"Image_${book%.pdf}"/p -jpeg
                                echo "Files converted."
                                break
                            else
                                echo "Found already converted files."
                                if whiptail --yesno "Found already converted files. Overwrite?" 0 0; then
                                    rm -dr "Image_${book%.pdf}" 2>/dev/null
                                    continue
                                else
                                    break
                                fi
                            fi
                        done

                        echo "Starting Scan."
                        mkdir "Text_${book%.pdf}" 2>/dev/null
                        cd ./"Image_${book%.pdf}" || exit
                        TESSDATA_PREFIX=/usr/share/tessdata
                        for pages in p*.jpg; do
                            tesseract "$pages" ../"Text_${book%.pdf}"/"${pages%.jpg}" || exit
                            printf "\n%s\n" "# ${pages%.jpg} \=\=\=PageBreak\=\=\=" >>../"Text_${book%.pdf}"/"Full Text.md" || exit
                            cat ../"Text_${book%.pdf}"/"${pages%.jpg}.txt" >>../"Text_${book%.pdf}"/"Full Text.md" || exit
                        done
                        cd "$workingDirectory" || exit 2
                        whiptail --msgbox "Scan finished!" 0 0 0
                        echo "Scan finished!"
                        book=$currentbook

                    else
                        book=$currentbook
                        cd "$workingDirectory" || exit 2
                    fi

                else
                    whiptail --msgbox "Split something first!" 0 0 0
                fi
                ;;

            "Reselect")
                currentbook="$book"
                book="$(find *.pdf | sort | dmenu -l 10)"
                if [ "$(head -c 4 "$book")" != "%PDF" ]; then
                    whiptail --msgbox "\"$book\" is not a PDF file or doesn't exist." 0 0 0
                    book=$currentbook
                    continue
                fi
                if find "$book" 2>/dev/null; then
                    echo "------------"
                    echo "Reselected: \"${book%.pdf}\""
                    echo
                    echo "Pages: $(pdfinfo "$book" | awk '/^Pages:/ {print $2}')"
                    echo "------------"
                else
                    book=$currentbook
                fi
                ;;

            "Open Folder")
                ranger "./.bookish/Split_${book%.pdf}/" 2>/dev/null || whiptail --msgbox "No folder for a \"${book%.pdf}\" yet." 0 0 0
                ;;

            "Delete Folder")
                if [ "$(ls -1 .bookish/ 2>/dev/null)" == "" ]; then
                    rm -dr ./.bookish/ 2>/dev/null
                    whiptail --msgbox "As no book folders were found,\n The bookish folder was purged" 0 0 0
                else

                    if [ -d ".bookish/Split_${book%.pdf}" ]; then
                        if whiptail --yesno "Delete \"${book%.pdf}\"'s bookish folder?" 0 0; then
                            rm -dr ".bookish/Split_${book%.pdf}"
                            whiptail --msgbox "Deleted \"${book%.pdf}\"'s bookish folder." 0 0 0
                        fi
                    else
                        whiptail --msgbox "No \"${book%.pdf}\"'s folder to delete." 0 0 0
                    fi

                fi
                ;;

            "Exit")
                whiptail --msgbox "Closed the programm on the \"${book%.pdf}\" book." 0 0 0
                echo "Closed the programm on the \"${book%.pdf}\" book."
                exit 0
                ;;
            "Find")
                if cd ".bookish/Split_${book%.pdf}"; then
                    if find Text_* >/dev/null; then
                        toSeek="$(ls -1 -d Text_* | sort | dmenu -l 10)"
                        if [ "$toSeek" = "" ]; then
                            cd "$workingDirectory" || exit 2
                            continue
                        fi
                        if cd "${toSeek}" 2>/dev/null; then
                            cat "Full Text.md" >"${toSeek#Text_}.md"
                            python_to_seek_in_book="${toSeek#Text_}.md"
                            py_search
                            rm "$python_to_seek_in_book"
                            cd "$workingDirectory" || exit 2
                        else
                            cd "$workingDirectory" || exit 2
                        fi
                    else
                        cd "$workingDirectory" || exit 2
                    fi
                else
                    cd "$workingDirectory" || exit 2
                    whiptail --msgbox "No folder for a \"${book%.pdf}\" yet." 0 0 0
                fi
                ;;
            "pwd!")
                echo " Currently at: $PWD"
                ;;
            "book!")
                echo " Current pdf is: $book"
                ;;
            "purge!")
                if find "$workingDirectory/.bookish" &>/dev/null; then
                    rm -dr ./.bookish/ 2>/dev/null
                    whiptail --msgbox "Removed ./bookish folder" 0 0 0
                    echo "Removed ./bookish folder"
                else
                    whiptail --msgbox "No ./bookish folder found" 0 0 0
                fi
                ;;
            *)
                whiptail --msgbox "No $bookishAction command" 0 0 0
                continue
                ;;

            esac

        done
    fi
done

# Close program on Esc only, restart if book doesn's exist (I hope...)

if ! [ "$book" == "" ]; then
    exec $(basename) "$0" && exit
fi

echo "Nothing to do."
